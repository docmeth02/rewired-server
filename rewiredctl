#!/usr/bin/env python
# -*- coding: UTF-8 -*-
import sys
import os
import signal
import time
import subprocess
from includes import wiredfunctions
binpath = sys.path[0] + os.sep
# load server config context
config = wiredfunctions.loadConfig(binpath + "server.conf")


def shutdown():
    global config
    pid = wiredfunctions.getPID(config)
    if int(pid) > 0:
        os.kill(int(pid), signal.SIGTERM)
        start = time.time()
        while wiredfunctions.getPID(config) and start + 10 > time.time():
            time.sleep(0.5)
        if wiredfunctions.getPID(config):
            return 0  # stil getting a pid, failed to shutdown in time
        return 1  # no pid anymore means server shutdown completed
    return 0


def signalTrackerRestart():
    global config
    pid = wiredfunctions.getPID(config)
    if int(pid) > 0:
        os.kill(int(pid), signal.SIGFPE)
        return 1
    return 0


def start():
    global config, binpath
    pid = wiredfunctions.getPID(config)
    if pid:
        print "server already running as pid " + str(pid) + " or stale pid file."
        return 0
    print "Starting re:wired server ..."
    os.execl(binpath + os.sep + "server.py", "server.py", "--daemon")
    print "Server Failed to start"
    return 1
try:
    arg = sys.argv[1]
except IndexError:
    arg = 0
    pass
if arg:
    if arg.upper() == "STOP":
        print "Stopping re:wired server ..."
        if not shutdown():
            print "Failed to open re:wired pid file. Server not running?"
        else:
            print "Shutdown complete"
        sys.exit()

    if arg.upper() == "START":
        if not start():
            print "Failed to start the re:wired server"
        else:
            print "Starting re:wired server ..."
        sys.exit()

    if arg.upper() == "RESTART":
        print "Stopping re:wired server ..."
        if not shutdown():
            print "Failed to open re:wired pid file. Server not running?"
        else:
            print "re:starting the re:wired server ..."
        time.sleep(5)
        if not start():
            print "Failed to start the re:wired server"
        else:
            print "server restart complete"
        sys.exit()

    if arg.upper() == "REGISTER":
        if not signalTrackerRestart():
            print "Failed to open re:wired pid file. Server not running?"
        print "Signal sent to server successfully"
        sys.exit()
## print usage
print "Usage: rewiredctl [ stop | start | restart | register]"
print "   stop      stop re:wired server"
print "   start     start re:wired server as a daemon"
print "   restart   shutdown and then restart the re:wired daemon"
print "   register  force tracker registration"
